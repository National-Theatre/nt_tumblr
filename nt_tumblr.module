<?php
/**
 * @file
 * @copyright The Royal National Theatre
 * @author John-Paul Drawneek
 */

/**
 * Implements hook_node_info().
 */
function nt_tumblr_node_info() {
  return array(
    'nt_tumblr' => array(
      'name' => t('NT Tumblr'),
      'base' => 'nt_tumblr',
      'description' => t('Create a block for holding Tumblr Posts which look good.'),
      'locked' => TRUE,
      'has_title' => TRUE,
    ),
  );
}
/**
 * Implements hook_menu().
 */
function nt_tumblr_menu() {
  return array();
}
/**
 * Implements hook_theme().
 */
function nt_tumblr_theme($existing, $type, $theme, $path) {
  return array(
    'nt_tumblr_table' => array(
      'render element' => 'element',
      'path' => $path . '/templates',
      'file' => 'theme.inc',
    ),
    'nt_tumblr_link' => array(
      'variables' => array('link' => NULL, 'node' => NULL),
      'path' => $path . '/templates',
      'template' => 'nt-tumblr-link',
      'preprocess functions' => array('nt_tumblr_link_pre'),
    ),
    'nt_tumblr_text' => array(
      'variables' => array('link' => NULL, 'message' => NULL, 'node' => NULL),
      'path' => $path . '/templates',
      'template' => 'nt-tumblr-text',
      'preprocess functions' => array('nt_tumblr_text_pre'),
    ),
  );
}
/**
 * Link block pre render helper.
 *
 * @param array $variables
 *   Variables to render.
 */
function nt_tumblr_link_pre(&$variables) {
  $variables['classes_array'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $link = $variables['node']->tweet_list['tweet']['link'];
  $url_list = explode('/', $link);
  $title_url = array_pop($url_list);
  $title = str_replace('-', ' ', $title_url);
  $variables['link'] = l(ucfirst($title), $link);
}
/**
 * Text block pre render helper.
 *
 * @param array $variables
 *   Variables to render.
 */
function nt_tumblr_text_pre(&$variables) {
  $variables['classes_array'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $link = $variables['node']->tweet_list['tweet']['link'];
  $variables['message'] = truncate_utf8(
    $variables['node']->tweet_list['tweet']['message'],
    100,
    TRUE,
    TRUE
  );
  $variables['link'] = l('Read More', $link);
}
/**
 * Implements hook_form().
 */
function nt_tumblr_form($node, $form_state) {
  $radio_default = NULL;
  $form = node_content_form($node, $form_state);
  if (isset($node->nt_tumblr_blog)) {
    $form_state['values']['nt_tumblr_blog'][LANGUAGE_NONE][0]['value']
      = $node->nt_tumblr_blog[LANGUAGE_NONE][0]['value'];
    if (isset($node->tweet_list) && !empty($node->tweet_list)) {
      $radio_default = $node->tweet_list['select_tweet'];
    }
  }
  if (isset($form_state['values']['nt_tumblr_blog'])) {
      _nt_tumblr_populate_posts($form, $form_state);
  }
  if (!isset($form_state['nt_tumblr'])) {
    $form_state['nt_tumblr'] = array();
  }
  if (!isset($form_state['nt_tumblr']['ordering'])) {
    $radios = array();
  }
  else {
    $radios = array_combine(
      $form_state['nt_tumblr']['ordering'],
      $form_state['nt_tumblr']['ordering']
    );
  }

  $form['tumblr_list'] = array(
    '#theme' => 'nt_tumblr_table',
    '#type'  => 'fieldset',
    '#title' => t('List of tumblr post'),
    '#tree'  => TRUE,
    '#data'  => $form_state['nt_tumblr'],
    'select_tweet' => array(
      '#type' => 'radios',
      '#options' => $radios,
      '#default_value' => $radio_default,
    ),
  );
  $form['tumblr_list']['get_list_posts'] = array(
    '#type' => 'submit',
    '#value' => 'Get List of posts',
    '#submit' => array('nt_tumblr_list_posts_submit'),
    '#validate' => array('nt_tumblr_list_posts_validate'),
    '#limit_validation_errors' => array(
      array('nt_tumblr_blog'),
    ),
  );
  $form['#attached']['js'][]
    = drupal_get_path('module', 'nt_tumblr') . '/js/jquery.tablesorter.min.js';
  $form['#attached']['js'][]
    = drupal_get_path('module', 'nt_tumblr') . '/js/form.js';
  $form['#attached']['css'][]
    = drupal_get_path('module', 'nt_tumblr') . '/css/style.css';
  $form['#submit'] = array('nt_tumblr_pack_save_submit');
  $form['#validate'][] = 'nt_tumblr_picked_posts_validate';
  return $form;
}
/**
 * List tweets validate.
 *
 * @param array $form
 *   The form being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_tumblr_list_posts_validate($form, &$form_state) {

  $channel = $form_state['values']['nt_tumblr_blog'][LANGUAGE_NONE][0]['value'];
  if (empty($channel)) {
    form_error($form['nt_tumblr_blog'], t('You must select either a blog.'));
  }
}
/**
 * Picked tweets validate.
 *
 * @param array $form
 *   The form being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_tumblr_picked_posts_validate($form, &$form_state) {

//  $channel = $form_state['values']['nt_twitter_chnl'][LANGUAGE_NONE][0]['value'];
//  $hashtag = $form_state['values']['nt_twitter_hash'][LANGUAGE_NONE][0]['value'];
//  if (empty($channel) && empty($hashtag)) {
//    form_error($form['nt_twitter_chnl'], t('You must select either a channel or hashtag.'));
//    form_error($form['nt_twitter_hash'], 'See above');
//  }
//  if ($form_state['values']['nt_twitter_type'][LANGUAGE_NONE][0]['value'] == 'picked'
//    && empty($form_state['values']['tweet_list']['select_tweet'])) {
//    form_error($form['tweet_list'], t('You must select a tweet.'));
//  }
}
/**
 * List tweets submit.
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.
 */
function nt_tumblr_list_posts_submit($form, &$form_state) {
  _nt_tumblr_populate_posts($form, $form_state);

  $form_state['rebuild'] = TRUE;
}
/**
 * Helper function to get list of posts.
 * @access private
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 */
function _nt_tumblr_populate_posts($form, &$form_state) {
  $blog = $form_state['values']['nt_tumblr_blog'][LANGUAGE_NONE][0]['value'];
  $url = 'http://' . $blog . '.tumblr.com/api/read/json';
  $options = array(
    'method' => 'GET',
  );
  $result = drupal_http_request($url, $options);
  if ($result->code == 200) {
    if (strpos($result->data, 'tumblr_api_read')) {
      $result->data = str_replace('var tumblr_api_read = ', '', trim($result->data));
      $result->data = substr($result->data, 0, strlen($result->data)-1);
    }
    $data_decoded = json_decode($result->data);
    $output = array();
    $ordering = array();
    foreach ($data_decoded->posts as $item) {
      switch ($item->type) {
        case 'link':
          $type = "link-description";
          break;
        case 'regular':
          $type = "regular-title";
          break;
        default:
          $type = $item->type . '-caption';
          break;
      }
      $description = $item->$type;
      $output[$item->id] = array(
        'type' => $item->type,
        'link' => $item->{'url-with-slug'},
        'message' => $description,
        'date' => $item->{'date-gmt'},
      );
      $ordering[] = $item->id;
    }
    $form_state['nt_tumblr']['data'] = $output;
    $form_state['nt_tumblr']['ordering'] = $ordering;
  }
  else {
    if (isset($result->data)) {
      $error = json_decode($result->data)->error;
    }
    else {
      $error = $result->error;
    }
    drupal_set_message(
      t(
        'Tumblr lookup failed with code: :code, :message',
        array(':code' => $result->code, ':message' => $error)
      ),
      'error'
    );
    $form_state['nt_tumblr'] = array();
  }
}
/**
 * This is to pack the override image data into its correct row.
 *
 * @param array $form
 *   The node being added or edited.
 * @param array $form_state
 *   The form state array.
 */
function nt_tumblr_pack_save_submit($form, &$form_state) {
  if (isset($form_state['nt_tumblr'])) {
    $form_state['values']['tweet_list']['tweet']
      = $form_state['nt_tumblr']['data'][$form_state['values']['tumblr_list']['select_tweet']];
  }
  elseif (isset($form_state['complete form']['tumblr_list'])) {
    $form_state['values']['tweet_list']['tweet']
      = $form_state['complete form']['tumblr_list']['#data']['data'][$form_state['values']['tumblr_list']['select_tweet']];
  }
  $form_state['values']['tweet_list']['select_tweet']
    = $form_state['values']['tumblr_list']['select_tweet'];
}
/**
 * Implements hook_insert().
 */
function nt_tumblr_insert($node) {
  db_insert('nt_tumblr_picked')->fields(array(
    'id'        => NULL,
    'nid'       => $node->nid,
    'vid'       => $node->vid,
    'tumblr_id' => $node->tweet_list['select_tweet'],
    'message'   => serialize($node->tweet_list['tweet']),
    'created'   => time(),
    'changed'   => time(),
  ))->execute();
}
/**
 * Implements hook_load().
 */
function nt_tumblr_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_query(
      "SELECT tumblr_id, message FROM {nt_tumblr_picked} WHERE nid = :nid AND vid = :vid",
      array(':nid' => $nid, ':vid' => $node->vid)
    );
    $result = $result->fetch();
    if ($result) {
      $node->tweet_list['select_tweet'] = $result->tumblr_id;
      $node->tweet_list['tweet'] = unserialize($result->message);
    }
    else {
      $node->tweet_list = array();
    }
  }
}
/**
 * Implements hook_update().
 */
function nt_tumblr_update($node) {
  //die('<pre>' . print_r($node, TRUE) . '</pre>');
  if ($node->vid == $node->original->vid) {
    db_update('nt_tumblr_picked')->fields(array(
      'tumblr_id' => $node->tweet_list['select_tweet'],
      'message' => serialize($node->tweet_list['tweet']),
      'changed' => time(),
    ))
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute();
  }
  else {
    db_insert('nt_tumblr_picked')->fields(array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'tumblr_id' => $node->tweet_list['select_tweet'],
      'message' => serialize($node->tweet_list['tweet']),
      'created' => time(),
      'changed' => time(),
    ))->execute();
  }
}
/**
 * Implements hook_delete().
 */
function nt_tumblr_delete($node) {
  db_delete('nt_tumblr_picked')
      ->condition('nid', $node->nid)
      ->execute();
}
/**
 * Implements hook_node_revision_delete().
 */
function nt_tumblr_revision_delete($node) {
  db_delete('nt_tumblr_picked')
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute();
}
/**
 * Implements hook_nt_feed_register_settings_form_alter().
 */
function nt_tumblr_nt_feed_register_settings_form_alter(&$form, &$form_state) {
  if (!(isset($form_state['item']->config['NtFeedTumblr']))) {
    $form_state['item']->config['NtFeedTumblr'] = array(
      array(
        'screen_name' => 'ntlive',
        'filter'      => ''
      ),
    );
  }
  $form['NtFeedTumblr'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Tumblr'),
    '#collapsible' => TRUE,
    '#tree'        => TRUE,
  );
  foreach ($form_state['item']->config['NtFeedTumblr'] as $config) {
    $config += array(
      'screen_name' => '',
      'filter'      => '',
    );
    $form['NtFeedTumblr'][] = array(
      'screen_name'  => array(
        '#type'          => 'textfield',
        '#title'         => t('Blog'),
        '#default_value' => $config['screen_name'],
      ),
    );
  }
  $form['NtFeedTumblr']['add'] = array(
    '#name' => 'NtFeedTumblrAdd',
    '#type' => 'submit',
    '#value' => t('More'),
    '#weight' => count($form['NtFeedTumblr']),
    '#submit' => array('nt_tumblr_add_submit'),
    '#limit_validation_errors' => array(),
  );
//  print '<pre>' . print_r($form, TRUE) . '</pre>';
}

function nt_tumblr_add_submit(&$form, &$form_state) {
  $form_state['item']->config['NtFeedTumblr'][] = array(
    'screen_name' => 'ntlive',
  );
  $form_state['rebuild'] = TRUE;
}

function nt_tumblr_nt_feed_register_settings_defaults_alter(&$settings) {
  $settings['NtFeedTumblr'] = array();
  $settings['NtFeedTumblr'][0] = array(
    'screen_name' => 'ntlive',
  );
}
/**
 * Implements hook_block_info().
 */
function nt_tumblr_block_info() {
  $result = db_query(
    'SELECT * FROM {node} WHERE type = :type AND status = 1',
    array(':type' => 'nt_tumblr')
  );
  $output = array();
  foreach ($result as $tumblr) {
    $output[$tumblr->nid] = array(
      'info'       => '(Tumblr) ' . $tumblr->title,
      'cache'      => DRUPAL_CACHE_PER_PAGE,
    );
  }
  return $output;
}
/**
 * Implements hook_block_view().
 */
function nt_tumblr_block_view($delta = '') {
  $node = node_load($delta);
  switch ($node->tweet_list['tweet']['type']) {
    case 'link':
      $theme = 'nt_tumblr_link';
      break;
    case 'text':
      $theme = 'nt_tumblr_text';
      break;
    default:
      $theme = '';
  }
  return array(
    'subject' => NULL,
    'content' => array(
      '#theme' => $theme,
      '#node'  => $node,
    ),
  );
}
